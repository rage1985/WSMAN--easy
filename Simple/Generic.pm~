package WSMAN::Simple::Generic;

use parent WSMAN::Simple;
use LWP::UserAgent;
use WSMAN::Simple::RURIS;
use Carp;


require Exporter;
require DynaLoader;
use vars qw( @ISA $VERSION @EXPORT @EXPORT_OK %EXPORT_TAGS);

$VERSION     = 1.02;
@ISA         = qw(Exporter);
@EXPORT      = ();
@EXPORT_OK   = qw(_SETRURI _SELECTORSET _TRANSACTION _XMLPARSER);

sub _SETRURI{

  #my $self = shift;
  my @args = @_;
  

  my @RURIP = split /_/, $args[0]; # Komfortfunktion: Bildet RURI aus der Endpoint Reference.
  $ResourceURI->setAttributeNS(URI_SOAP,"mustUnderstand", "true");
  $ResourceURI->setNamespace(URI_WSMAN1,"wsman",1);
  $ResourceURI->removeChildNodes();	
  if ($RURIP[0] eq "CIM"){
    $ResourceURI->appendTextNode("@{[URI_CIM]}$args[0]");
    }
    elsif ($RURIP[0] eq "DCIM"){
      $ResourceURI->appendTextNode("@{[URI_DCIM]}$args[0]");
    }
    elsif ($RURIP[0] eq "OMC"){
      $ResourceURI->appendTextNode("@{[&URI_OMC]}$args[0]");
    }
    elsif ($RURIP[0] eq "VMware"){
      $ResourceURI->appendTextNode("@{[URI_VMware]}$args[0]");
    }
    elsif ($RURIP[0] eq "WIN32"){
      $ResourceURI->appendTextNode("@{[URI_WIN32]}$args[0]");
    }
    elsif ($RURIP[0] eq "WMI"){
      $ResourceURI->appendTextNode("@{[URI_WMI]}$args[0]");
    }
    elsif ($RURIP[0] eq "WMICIMV2"){
      $ResourceURI->appendTextNode("@{[URI_WMICIMV2]}$args[0]");
    }
    elsif ($RURIP[0] eq "CIMV2"){
      $ResourceURI->appendTextNode("@{[URI_CIMV2]}$args[0]");
    }
    elsif ($RURIP[0] eq "WINRM"){
      $ResourceURI->appendTextNode("@{[URI_WINRM]}$args[0]");
    }
    elsif ($RURIP[0] eq "WSMAN"){
      $ResourceURI->appendTextNode("@{[URI_WSMAN1]}$args[0]");
    }
    elsif ($RURIP[0] eq "SHELL"){
      $ResourceURI->appendTextNode("@{[URI_SHELL]}$args[0]");
    }
    else{
      croak "Fehler bei Klasse"}

    $args[0] = "";

}

sub _SELECTORSET{

  my $self = shift;
  my $args = $_[0];
  	
  $selectorset = $request->createElement("SelectorSet");
  $selectorset->setNamespace(URI_WSMAN1,"wsman",1);
  while ( my ($k,$v) = each %$args ) {
    my $selector = $request->createElement("Selector");
    $selector->setAttribute('Name', $k);
    $selector->setNamespace(URI_WSMAN1,"wsman",1);
    $selector->appendTextNode($v);
    $selectorset->appendChild($selector);
  }
  $header->appendChild($selectorset);

   
}

sub _TRANSACTION{

  my $self = shift;

  my $ua = new LWP::UserAgent;
  $ua->credentials("$self->{'host'}/$self->{'urlpath'}", "$self->{'urlpath'}" );
  #$ua->ssl_opts( verify_hostname => 0, verify_peer => 0 );

  my $req = new HTTP::Request 'POST',"$self->{'proto'}://$self->{'host'}:$self->{'port'}/$self->{'urlpath'}";
  #print $req;
  $req->content_type('application/soap+xml;charset=UTF-8');
  $req->authorization_basic($self->{'user'}, $self->{'passwd'});
  $req->content($_[0]);

  my $res = $ua->request($req);
  #print $res->as_string;
  my $result = $res->content();
  print $result;
  
  return $result;

}

sub _XMLPARSER{
  
  my $self = shift;
  my $args = @_;
  print $_[0];
  
  
  
  
  my $parser = XML::LibXML->new();

my $doc = XML::LibXML->load_xml(
      string => $_[0]
      # parser options ...
    );

my $root = $doc->documentElement();

my @nodes = $root->findnodes( './s:Body/n:PullResponse/n:Items/*') && $root->findnodes('./s:Body/wsmid:IdentifyResponse/*');
my $output;
my @childnodes;
my @childnodes2;
my @childnodes3;

foreach (@nodes){
  $output .= "----";
  $output .= $_->localName;
  $output .= "----\n";
  if ($_->hasChildNodes() == '1'){
    @childnodes = $_->childNodes();
    foreach (@childnodes){
      if ($_->nodeName ne '#text' && $_->hasChildNodes() == '1'){
        $output .= $_->localName;
        $output .= " -> ";
        @childnodes2 = $_->childNodes();
          foreach (@childnodes2){
            if ($_->hasChildNodes() == '0'){
              $output .= $_->nodeValue;
              $output .= "\n";
            }
        else{
          @childnodes3 = $_->childNodes();
          foreach (@childnodes3){
            if ($_->hasChildNodes() == '0'){
              $output .= $_->nodeValue;
              $output .= "\n";
            }
          }
        
      }
    }
  }
}   
  }
  else{
  print $_->localName," hat keine childnodes\n";
  }
  
};

return $output;
}
